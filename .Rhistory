setwd("D:/TRAININGS/Visualisation de données avec R/vdr")
library(tidyverse)
counties <- readRDS("data/counties.rds")
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(questionr) # pour les données
## Données
data(rp2018)
rp <- filter(
rp2018,
departement %in% c("Oise", "Rhône", "Hauts-de-Seine", "Bouches-du-Rhône")
)
counties <- readRDS("data/counties.rds")
tab2 <- counties %>%
mutate(population_walk = population * walk / 100) %>%
count(state, wt = population_walk, sort = T) %>%
rename(n = "dddd")
tab2 <- counties %>%
mutate(population_walk = population * walk / 100) %>%
count(state, wt = population_walk, sort = T) %>%
rename(n = "dddd")
tab2 <- counties %>%
mutate(population_walk = population * walk / 100) %>%
count(state, wt = population_walk, sort = T) %>%
rename("dddd" = n)
head()
tab2 <- counties %>%
mutate(population_walk = population * walk / 100) %>%
count(state, wt = population_walk, sort = T) %>%
rename("dddd" = n) %>%
head()
knitr::kable(tab2)
counties_small %>%
mutate(proportion_femme = women / population) %>%
arrange(desc(proportion_femme)) %>%
select(state, county, proportion_femme) %>%
head(5)
counties_small <- counties %>%
select(region, state, county, public_work, population,
private_work, women, citizens, work_at_home, walk, land_area)
counties_small
counties_small %>%
mutate(proportion_femme = women / population)
counties_small %>%
mutate(proportion_femme = women / population) %>%
arrange(desc(proportion_femme))
counties_small %>%
mutate(proportion_femme = women / population) %>%
arrange(desc(proportion_femme)) %>%
select(state, county, proportion_femme)
counties_small %>%
mutate(proportion_femme = women / population) %>%
arrange(desc(proportion_femme)) %>%
select(state, county, proportion_femme) %>%
head(5)
tab1 <- counties %>%
mutate('proportion de femmes' = round(women / population, 2)) %>%
arrange(desc('proportion de femmes')) %>%
select(state, county, 'proportion de femmes') %>%
head(5)
knitr::kable(tab1)
counties %>%
mutate('proportion de femmes' = round(women / population, 2)) %>%
arrange(desc('proportion de femmes')) %>%
select(state, county, 'proportion de femmes') %>%
head(5)
counties %>%
mutate('proportion de femmes' = round(women / population, 2)) %>%
arrange(desc('proportion de femmes')) %>%
select(state, county, 'proportion de femmes') %>%
head(5)
counties %>%
mutate(prop = round(women / population, 2)) %>%
arrange(desc(prop)) %>%
select(state, county, prop) %>%
head(5)
counties %>%
mutate(prop = round(women / population, 2)) %>%
arrange(desc(prop)) %>%
select(state, county, "fdfd" = prop) %>%
head(5)
counties %>%
mutate(prop = round(women / population, 2)) %>%
arrange(desc(prop)) %>%
select(state, county, "Proportion de femmes" = prop) %>%
head(5)
?install.packages()
# Installer les packages
install.packages("tidyverse", "questionr", "ggcorrplot", "ggstats", "scales")
pacman::p_load()
# bins : nombre d'intervalle
# binwidth : largeur d'intervalle
ggplot(rp) +
geom_histogram(aes(x = cadres),
bins = 15,
fill = "cornflowerblue")
rp2018 %>%
filter(
departement %in% c("Oise", "Rhône", "Hauts-de-Seine", "Bouches-du-Rhône")
)
## Données
data(rp2018)
rp2018 %>%
filter(
departement %in% c("Oise", "Rhône", "Hauts-de-Seine", "Bouches-du-Rhône")
)
pacman::p_load(
tidyverse, questionr, ggcorrplot, ggstats, scales
)
rp2018 %>%
filter(
departement %in% c("Oise", "Rhône", "Hauts-de-Seine", "Bouches-du-Rhône")
)
View(rp2018)
## Données
data(rp2018)
View(rp2018)
rp2018 %>%
filter(
departement %in% c("Oise", "Rhône", "Hauts-de-Seine", "Bouches-du-Rhône")
)
## Données
data(rp2018)
rp2018 %>%
filter(
departement %in% c("Oise", "Rhône", "Hauts-de-Seine", "Bouches-du-Rhône")
)
pacman::p_load(
tidyverse, questionr, ggcorrplot, ggstats, scales
)
rp2018 %>%
filter(
departement %in% c("Oise", "Rhône", "Hauts-de-Seine", "Bouches-du-Rhône")
)
## Données
data(rp2018)
rp2018 %>%
filter(
departement %in% c("Oise", "Rhône", "Hauts-de-Seine", "Bouches-du-Rhône")
)
# avec ggstats : stat = "prop"
ggplot(rp) +
geom_bar(aes(x = region, y = after_stat(prop), by = 1), stat = "prop") +
scale_y_continuous(labels =  scales::label_percent())
rp <- rp2018 %>%
filter(
departement %in% c("Oise", "Rhône", "Hauts-de-Seine", "Bouches-du-Rhône")
)
# avec ggstats : stat = "prop"
ggplot(rp) +
geom_bar(aes(x = region, y = after_stat(prop), by = 1), stat = "prop") +
scale_y_continuous(labels =  scales::label_percent())
ggplot(rp) +
geom_bar(aes(x = region, y = after_stat(prop), by = 1), stat = "prop")
# avec ggstats : stat = "prop"
ggplot(rp) +
geom_bar(aes(x = region, y = after_stat(prop), by = 1), stat = "prop") +
scale_y_continuous(labels =  scales::label_percent())
#ordonner les modalités
ggplot(rp) +
geom_bar(aes(x = forcats::fct_infreq(region)))
# afficher les valeurs
ggplot(data = rp, aes(
# ordonner les modalités
x = fct_infreq(region),
# calculer les proportions
y = after_stat(prop),
# calculer par rapport au total
by = 1
)) +
geom_bar(
# calculer les proportions des barres
stat = "prop", fill = "cornflowerblue"
) +
geom_text(
# afficher les labels
stat = "prop",
vjust = 1.6,
color = "white")
ggplot(data = rp, aes(
# ordonner les modalités
x = fct_infreq(region),
# calculer les proportions
y = after_stat(prop),
# calculer par rapport au total
by = 1
))
ggplot(data = rp, aes(
# ordonner les modalités
x = fct_infreq(region),
# calculer les proportions
y = after_stat(prop),
# calculer par rapport au total
by = 1
)) +
geom_bar(
# calculer les proportions des barres
stat = "prop", fill = "cornflowerblue"
)
# afficher les valeurs
ggplot(data = rp, aes(
# ordonner les modalités
x = fct_infreq(region),
# calculer les proportions
y = after_stat(prop),
# calculer par rapport au total
by = 1
)) +
geom_bar(
# calculer les proportions des barres
stat = "prop", fill = "cornflowerblue"
) +
geom_text(
# afficher les labels
stat = "prop",
#vjust = 1.6,
color = "white")
# afficher les valeurs
ggplot(data = rp, aes(
# ordonner les modalités
x = fct_infreq(region),
# calculer les proportions
y = after_stat(prop),
# calculer par rapport au total
by = 1
)) +
geom_bar(
# calculer les proportions des barres
stat = "prop", fill = "cornflowerblue"
) +
geom_text(
# afficher les labels
stat = "prop",
vjust = 1.6,
color = "white")
rp %>%
group_by(region) %>%
summarise(n = n()) %>%
mutate(prop = round(n / sum(n) * 100, 2))
plt1 %>%
ggplot() +
geom_col(aes(x = region, y = prop)) +
geom_text(aes(label = prop))
# geom_col() : à partir d'un tableau
plt1 <- rp %>%
group_by(region) %>%
summarise(n = n()) %>%
mutate(prop = round(n / sum(n) * 100, 2))
plt1 %>%
ggplot() +
geom_col(aes(x = region, y = prop)) +
geom_text(aes(label = prop))
plt1 %>%
ggplot() +
geom_col(aes(x = region, y = prop)) +
geom_text(label = prop)
plt1 %>%
ggplot(aes(x = region, y = prop)) +
geom_col() +
geom_text(aes(label = prop))
plt1 %>%
ggplot(aes(x = region, y = prop)) +
geom_col() +
geom_text(aes(label = prop), vjust = 1.6)
plt1 %>%
ggplot(aes(x = region, y = prop)) +
geom_col() +
geom_text(aes(label = prop), vjust = 0)
plt1 %>%
ggplot(aes(x = region, y = prop)) +
geom_col() +
geom_text(aes(label = prop), vjust = -0.2)
plt1 %>%
ggplot() +
geom_col(aes(x = region, y = prop)) +
geom_text(aes(label = prop), vjust = -0.2)
plt1 %>%
ggplot(aes(x = region, y = prop))
plt1 %>%
ggplot(aes(x = region, y = prop)) +
geom_col()
plt1 %>%
ggplot(aes(x = region, y = prop)) +
geom_col() +
geom_text(aes(label = prop), vjust = -0.2)
plt1 %>%
ggplot() +
geom_col(aes(x = region, y = prop)) +
geom_text(aes(label = prop), vjust = -0.2)
plt1 %>%
ggplot() +
geom_col(aes(x = region, y = prop))
plt1 %>%
ggplot() +
geom_col(aes(x = fct_infreq(region), y = prop))
#ordonner les modalités
plt1 %>%
ggplot() +
geom_col(aes(x = fct_reorder(region, prop, .desc = F),
y = prop))
#ordonner les modalités
plt1 %>%
ggplot() +
geom_col(aes(x = fct_reorder(region, prop, .desc = T),
y = prop))
#ordonner les modalités
plt1 %>%
ggplot(aes(x = fct_reorder(region, prop, .desc = T),
y = prop)) +
geom_col()
#ordonner les modalités
plt1 %>%
ggplot() +
geom_col(aes(x = fct_reorder(region, prop, .desc = T),
y = prop))
ggplot(rp) +
geom_point(aes(x = dipl_sup, y = ouvr))
# size, color et alpha
ggplot(rp) +
geom_point(aes(x = dipl_sup, y = ouvr),
size = 3, color = "darkgreen", alpha = 0.5)
ggplot(rp) +
geom_text(aes(x = dipl_sup, y = ouvr, label = commune))
ggplot(rp) +
geom_label(aes(x = dipl_sup, y = ouvr, label = commune))
data("economics")
force(economics)
head(economics)
ggplot(economics) +
geom_line(aes(x = date, y = psavert)) +
ggtitle("Evolution du taux d'épargne personnel aux
\nEtats-Unis de 1967 à 2015") +
xlab("Année") +
ylab("Taux d'épargne personnel")
# même résultat avec labs()
ggplot(economics) +
geom_line(aes(x = date, y = psavert)) +
labs(title = "Evolution du taux d'épargne personnel aux
\nEtats-Unis de 1967 à 2015",
x = "Année",
y = "Taux d'épargne personnel")
### Visualiser les corrélations
library(ggcorrplot)
rp %>%
# sélection des variables
select(agric, femmes, indep, dipl_aucun, dipl_bac, dipl_sup,
locataire, chom, cadres, ouvr) %>%
# calcul de la corrélation
cor() %>%
# graphique
ggcorrplot(type = "lower", hc.order = T, lab = T) +
ggtitle("Matrice de corrélation ")
cor(rp %>%
# sélection des variables
select(agric, femmes, indep, dipl_aucun, dipl_bac, dipl_sup,
locataire, chom, cadres, ouvr))
cor(rp %>%
# sélection des variables
select(agric, femmes, indep, dipl_aucun, dipl_bac, dipl_sup,
locataire, chom, cadres, ouvr))
rp %>%
# sélection des variables
select(agric, femmes, indep, dipl_aucun, dipl_bac, dipl_sup,
locataire, chom, cadres, ouvr) %>%
cor()
rp %>%
# sélection des variables
select(agric, femmes, indep, dipl_aucun, dipl_bac, dipl_sup,
locataire, chom, cadres, ouvr) %>%
cor() %>%
round(2)
rp %>%
# sélection des variables
select(agric, femmes, indep, dipl_aucun, dipl_bac, dipl_sup,
locataire, chom, cadres, ouvr) %>%
cor() %>%
round(2)
rp %>%
# sélection des variables
select(agric, femmes, indep, dipl_aucun, dipl_bac, dipl_sup,
locataire, chom, cadres, ouvr) %>%
cor() %>%
round(2)
pacman::p_load(
tidyverse, questionr, ggstats
)
# charger les données
load("data/rp.Rdata")
ggplot(rp) +
geom_point(aes(x = dipl_sup, y = ouvr))
# varier les couleurs et le motif selon les départements
ggplot(rp) +
geom_point(aes(x = dipl_sup, y = ouvr, color = departement))
ggplot(rp) +
geom_point(aes(x = dipl_sup, y = ouvr, shape = departement, color = departement))
# ajout d'une variable numérique : taux de chômage
ggplot(rp) +
geom_point(aes(
x = dipl_sup,
y = ouvr,
color = departement,
size = chom), alpha = 0.5)
ggplot(rp) +
geom_density(aes(x = cadres))
ggplot(rp) +
geom_density(aes(x = cadres, color = region))
rp %>%
group_by(region) %>%
summarise(prop = mean(cadres))
rp %>%
group_by(region) %>%
summarise(prop = mean(cadres))
# ajouter linetype = region
ggplot(rp) +
geom_density(aes(x = cadres, linetype = region))
ggplot(rp) +
geom_point(aes(x = dipl_sup, y = cadres), size = 3)
ggplot(rp) +
geom_point(aes(x = dipl_sup, y = cadres, size = pop_tot))
# varier la couleur
ggplot(data = rp) +
geom_bar(aes(
x = departement,
fill = departement), show.legend = F)
ggplot(rp) +
geom_bar(aes(x = region, fill = pop_cl))
# ajouter des effectifs
ggplot(rp, aes(x = region,
fill = pop_cl,
label = after_stat(count))) +
geom_bar() +
geom_text(
stat = "count",
position = position_stack(0.5)#,
#color = "white"
)
# barres côte à côte
ggplot(rp) +
geom_bar(aes(x = region, fill = pop_cl), position = "dodge")
# avec ggstats
# barres côte à côte : pourcentages
ggplot(rp, aes(x = region,
y = after_stat(prop),
by = pop_cl,
fill = pop_cl,
label = scales::percent(after_stat(prop), accuracy = 12))) +
geom_bar(stat = "prop",
position = position_dodge(0.9)) +
geom_text(aes(y = after_stat(prop) - 0.01), # texte en dehors des barres : +0.01
stat = "prop",
position = position_dodge(0.9)) +
scale_y_continuous(labels = scales::percent)
# barres côte à côte
ggplot(rp) +
geom_bar(aes(x = region, fill = pop_cl), position = "dodge")
# ajouter des pourcentages
ggplot(rp, aes(x = region,
fill = pop_cl,
by = pop_cl,
label = scales::percent(after_stat(prop), accuracy = 0.1))) +
geom_bar(position = "fill") +
geom_text(
stat = "prop",
position = position_fill(0.5),
color = "white"
) +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank())
# avec ggstats
# barres côte à côte : pourcentages
ggplot(rp, aes(x = region,
y = after_stat(prop),
by = pop_cl,
fill = pop_cl,
label = scales::percent(after_stat(prop), accuracy = 12))) +
geom_bar(stat = "prop",
position = position_dodge(0.9)) +
geom_text(aes(y = after_stat(prop) - 0.01), # texte en dehors des barres : +0.01
stat = "prop",
position = position_dodge(0.9)) +
scale_y_continuous(labels = scales::percent, expand = c(0, 0))
# ajouter des pourcentages
ggplot(rp, aes(x = region,
fill = pop_cl,
by = pop_cl,
label = scales::percent(after_stat(prop), accuracy = 0.1))) +
geom_bar(position = "fill") +
geom_text(
stat = "prop",
position = position_fill(0.5),
color = "white"
) +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank())
# ajouter des pourcentages
ggplot(rp, aes(x = region,
fill = pop_cl,
by = pop_cl,
label = scales::percent(after_stat(prop), accuracy = 0.1))) +
geom_bar(position = "fill") +
geom_text(
stat = "prop",
position = position_fill(0.5),
color = "white"
) +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
axis.ticks.y = element_blank()) +
scale_y_continuous(expand = c(0, 0))
